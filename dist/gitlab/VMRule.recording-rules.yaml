apiVersion: operator.victoriametrics.com/v1beta1
kind: VMRule
metadata:
  name: recording-rules
  namespace: gitlab
spec:
  groups:
    - name: GitLab
      rules:
        - expr: |
            sum by (instance) (
              puma_active_connections
            ) / sum by (instance) (
              puma_max_threads
            )
          record: instance:puma_utilization:ratio
        - expr: |
            sum by (job, route, method, code) (
              rate(gitlab_workhorse_http_request_duration_seconds_count[5m])
            )
          record: job_route_method_code:gitlab_workhorse_http_request_duration_seconds_count:rate5m
        - alert: ServiceDown
          annotations:
            description: The service {{ $labels.job }} instance {{ $labels.instance }} is not responding for more than 50% of the time for 5 minutes.
            summary: The service {{ $labels.job }} is not responding
          expr: avg_over_time(up[5m]) * 100 < 50
        - alert: RedisDown
          annotations:
            description: The Redis service {{ $labels.job }} instance {{ $labels.instance }} is not responding for more than 50% of the time for 5 minutes.
            summary: The Redis service {{ $labels.job }} is not responding
          expr: avg_over_time(redis_up[5m]) * 100 < 50
        - alert: PostgresDown
          annotations:
            description: The Postgres service {{ $labels.job }} instance {{ $labels.instance }} is not responding for more than 50% of the time for 5 minutes.
            summary: The Postgres service {{ $labels.job }} is not responding
          expr: avg_over_time(pg_up[5m]) * 100 < 50
        - alert: PumaQueueing
          annotations:
            description: Puma instance {{ $labels.instance }} is queueing requests with an average of {{ $value | printf "%.1f" }} over the last 30 minutes.
            summary: Puma is queueing requests
          expr: avg_over_time(puma_queued_connections[30m]) > 1
        - alert: HighPumaUtilization
          annotations:
            description: Puma instance {{ $labels.instance }} has more than 90% thread utilization ({{ $value | printf "%.1f" }}%) over the last 60 minutes.
            summary: Puma is has high utilization
          expr: instance:puma_utilization:ratio * 100 > 90
          for: 60m
        - alert: SidekiqJobsQueuing
          annotations:
            description: Sidekiq queue {{ $labels.name }} has {{ $value }} jobs queued for 60 minutes.
            summary: Sidekiq has jobs queued
          expr: sum by (name) (sidekiq_queue_size) > 0
          for: 60m
        - alert: HighgRPCResourceExhaustedRate
          annotations:
            description: Job {{ $labels.job }} instance {{ $labels.instance }} gRPC is returning more than 1% ({{ $value | printf "%.1f" }}%) ResourceExhausted errors over the last 60 minutes.
            summary: High gRPC ResourceExhausted error rate
          expr: |
            sum without (grpc_code, grpc_method, grpc_service, grpc_type) (
              rate(grpc_server_handled_total{grpc_code="ResourceExhausted"}[5m])
            ) / sum without (grpc_code, grpc_method, grpc_service, grpc_type) (
              rate(grpc_server_handled_total[5m])
            ) * 100 > 1
          for: 60m
        - alert: PostgresDatabaseDeadlocks
          annotations:
            description: Postgres database {{ $labels.instance }} had {{ $value | printf "%d" }} deadlocks in the last 5 minutes.
            summary: Postgres database has deadlocks
          expr: increase(pg_stat_database_deadlocks[5m]) > 0
        - alert: PostgresDatabaseDeadlockCancels
          annotations:
            description: Postgres database {{ $labels.instance }} had {{ $value | printf "%d" }} queries canceled due to deadlocks in the last 5 minutes.
            summary: Postgres database has queries canceled due to deadlocks
          expr: increase(pg_stat_database_deadlocks[5m]) > 0
        - alert: WorkhorseHighErrorRate
          annotations:
            description: Workhorse route {{ $labels.route }} method {{ $labels.method }} has more than 50% errors ({{ $value | printf "%.1f" }}%) for the last 60 minutes.
            summary: Workhorse has high error rates
          expr: |
            (
              sum without (job, code) (
                job_route_method_code:gitlab_workhorse_http_request_duration_seconds_count:rate5m{code=~"5.."}
              ) /
              sum without (job,code) (
                job_route_method_code:gitlab_workhorse_http_request_duration_seconds_count:rate5m
              ) < 10
            ) * 100 > 50
        - alert: WorkhorseHighErrorRate
          annotations:
            description: Workhorse route {{ $labels.route }} method {{ $labels.method }} has more than 10% errors ({{ $value | printf "%.1f" }}%) for the last 60 minutes.
            summary: Workhorse has high error rates
          expr: |
            (
              sum without (job, code) (
                job_route_method_code:gitlab_workhorse_http_request_duration_seconds_count:rate5m{code=~"5.."}
              ) /
              sum without (job,code) (
                job_route_method_code:gitlab_workhorse_http_request_duration_seconds_count:rate5m
              ) > 10
            ) * 100 > 10
    - interval: 30s
      name: Service Level Indicators
      rules:
        - expr: |
            avg by (job) (
              avg_over_time(up[30s])
            )
          record: gitlab_sli:job:availability:ratio
        - expr: |
            sum(avg_over_time(puma_active_connections[30s]))
          record: gitlab_sli:rails_active_connections:avg30s
        - expr: |
            sum(avg_over_time(puma_queued_connections[30s]))
          record: gitlab_sli:rails_queued_connections:avg30s
        - expr: |
            sum(max_over_time(puma_active_connections[30s]))
          record: gitlab_sli:rails_active_connections:max30s
        - expr: |
            sum(max_over_time(puma_queued_connections[30s]))
          record: gitlab_sli:rails_queued_connections:max30s
        - expr: |
            count(avg_over_time(ruby_memory_bytes[30s])) or sum(avg_over_time(puma_max_threads[30s]))
          record: gitlab_sli:rails_workers:avg30s
        - expr: |
            (sum(rate(redis_used_cpu_sys[1m])) + sum(rate(redis_used_cpu_user[1m]))) or (sum(rate(redis_cpu_sys_seconds_total[1m])) + sum(rate(redis_cpu_user_seconds_total[1m])))
          record: gitlab_sli:redis_cpu_seconds:rate1m
        - expr: |
            sum by (code,method,route) (
              rate(gitlab_workhorse_http_request_duration_seconds_count[1m])
            )
          record: gitlab_sli:code_method_route:workhorse_http_request_count:rate1m
        - expr: |
            sum by (code,method,route) (
              rate(gitlab_workhorse_http_request_duration_seconds_sum[1m])
            )
          record: gitlab_sli:code_method_route:workhorse_http_request_duration_seconds:rate1m
    - interval: 1m
      name: Service Level Indicators - Apdex
      rules:
        - expr: |
            (
              sum(rate(grpc_server_handling_seconds_bucket{job="gitaly",grpc_type="unary",le="0.5",grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m]))
              +
              sum(rate(grpc_server_handling_seconds_bucket{job="gitaly",grpc_type="unary",le="1",grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m]))
            ) / 2 / sum(rate(grpc_server_handling_seconds_count{job="gitaly",grpc_type="unary",grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m]))
          labels:
            job: gitaly
          record: gitlab_sli:gitlab_component_apdex:ratio
        - expr: |
            (
              sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{le="1",route!="^/([^/]+/){1,}[^/]+/uploads\\z",route!="^/api/v4/jobs/request\\z"}[1m]))
            +
              sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{le="10",route!="^/([^/]+/){1,}[^/]+/uploads\\z",route!="^/api/v4/jobs/request\\z"}[1m]))
            ) / 2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{route!="^/([^/]+/){1,}[^/]+/uploads\\z",route!="^/api/v4/jobs/request\\z"}[1m]))
          labels:
            job: gitlab-workhorse
          record: gitlab_sli:gitlab_component_apdex:ratio
    - interval: 1m
      name: Service Level Indicators - Errors
      rules:
        - expr: |
            sum(rate(pg_stat_database_xact_commit[1m])) + sum(rate(pg_stat_database_xact_rollback[1m]))
          labels:
            job: postgres
          record: gitlab_sli:gitlab_component_ops:rate
        - expr: sum(rate(pg_stat_database_xact_rollback[1m]))
          labels:
            job: postgres
          record: gitlab_sli:gitlab_component_errors:rate
        - expr: |
            sum(
              rate(http_request_duration_seconds_count{job="gitlab-rails"}[1m])
            )
          labels:
            job: gitlab-rails
          record: gitlab_sli:gitlab_component_ops:rate
        - expr: |
            sum(
              rate(http_request_duration_seconds_count{job="gitlab-rails",status=~"5.."}[1m])
            )
          labels:
            job: gitlab-rails
          record: gitlab_sli:gitlab_component_errors:rate
        - expr: |
            sum(
              rate(gitlab_workhorse_http_requests_total{job="gitlab-workhorse"}[1m])
            )
          labels:
            job: gitlab-workhorse
          record: gitlab_sli:gitlab_component_ops:rate
        - expr: |
            sum(
              rate(gitlab_workhorse_http_requests_total{job="gitlab-workhorse",code=~"5.."}[1m])
            )
          labels:
            job: gitlab-workhorse
          record: gitlab_sli:gitlab_component_errors:rate
        - expr: |
            gitlab_sli:gitlab_component_errors:rate / gitlab_sli:gitlab_component_ops:rate
          record: gitlab_sli:gitlab_component_errors:ratio
    - interval: 1m
      name: GitLab Saturation Ratios
      rules:
        - expr: |
            avg(1 - rate(node_cpu_seconds_total{mode="idle"}[1m]))
          labels:
            component: cpu
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            max(
              avg(1 - rate(node_cpu_seconds_total{mode="idle"}[1m]))
            )
          labels:
            component: single_node_cpu
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            max(
              (
                (
                  node_filesystem_size_bytes{fstype=~"ext.|xfs|nfs.?"}
                  -
                  node_filesystem_free_bytes{fstype=~"ext.|xfs|nfs.?"}
                )
                /
                node_filesystem_size_bytes{fstype=~"ext.|xfs|nfs.?"}
              )
            )
          labels:
            component: disk_space
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: max (instance:node_memory_utilization:ratio)
          labels:
            component: memory
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            clamp_max(
              max (
               (rate(redis_cpu_user_seconds_total[1m]) + rate(redis_cpu_sys_seconds_total[1m])) or
               (rate(redis_used_cpu_user[1m]) + rate(redis_used_cpu_sys[1m]))
              ),
              1
            )
          labels:
            component: single_threaded_cpu
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            clamp_max(
              max(
                max_over_time(pgbouncer_pools_server_active_connections{user="gitlab"}[1m]) /
                (
                  (
                    pgbouncer_pools_server_idle_connections{user="gitlab"} +
                    pgbouncer_pools_server_active_connections{user="gitlab"} +
                    pgbouncer_pools_server_testing_connections{user="gitlab"} +
                    pgbouncer_pools_server_used_connections{user="gitlab"} +
                    pgbouncer_pools_server_login_connections{user="gitlab"}
                  )
                  > 0
                )
            ), 1)
          labels:
            component: connection_pool
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            clamp_max(
              max(
                sum without(state) (pg_stat_activity_count{datname="gitlabhq_production", state!="idle"})
                /
                (sum without(state) (pg_stat_activity_count{datname="gitlabhq_production"}) > 0)
            ), 1)
          labels:
            component: active_db_connections
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            max(
              max_over_time(redis_connected_clients[1m])
              /
              redis_config_maxclients
            )
          labels:
            component: redis_clients
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            max by (component) (gitlab_sli:gitlab_component_saturation:ratio)
          record: gitlab_sli:gitlab_service_saturation:ratio
        - expr: |
            clamp_min(gitlab_sli:gitlab_component_saturation:ratio <= on(component) group_left slo:max:soft:gitlab_sli:gitlab_component_saturation:ratio, 1) or clamp_min(clamp_max(gitlab_sli:gitlab_component_saturation:ratio > on(component) group_left slo:max:soft:gitlab_sli:gitlab_component_saturation:ratio, 0.5), 0.5) or clamp_max(gitlab_sli:gitlab_component_saturation:ratio > on(component) group_left slo:max:hard:gitlab_sli:gitlab_component_saturation:ratio, 0)
          record: gitlab_sli:gitlab_component_saturation:ratio:sapdex
        - expr: |
            max(
              max_over_time(process_open_fds[1m])
              /
              max_over_time(process_max_fds[1m])
            )
          labels:
            component: open_fds
          record: gitlab_sli:gitlab_component_saturation:ratio
        - expr: |
            max(
              max_over_time(ruby_file_descriptors[1m])
              /
              max_over_time(ruby_process_max_fds[1m])
            )
          labels:
            component: open_ruby_fds
          record: gitlab_sli:gitlab_component_saturation:ratio
    - interval: 5m
      name: GitLab Saturation Ratios Stats
      rules:
        - expr: |
            avg_over_time(gitlab_sli:gitlab_component_saturation:ratio[1w])
          record: gitlab_sli:gitlab_component_saturation:ratio:avg_over_time_1w
        - expr: |
            predict_linear(gitlab_sli:gitlab_component_saturation:ratio:avg_over_time_1w[1w], 86400 * 14)
          record: gitlab_sli:gitlab_component_saturation:ratio:predict_linear_2w
        - expr: |
            predict_linear(gitlab_sli:gitlab_component_saturation:ratio:avg_over_time_1w[1w], 86400 * 30)
          record: gitlab_sli:gitlab_component_saturation:ratio:predict_linear_30d
        - expr: |
            avg_over_time(gitlab_sli:gitlab_component_saturation:ratio:sapdex[1w])
          record: gitlab_sli:gitlab_component_saturation:ratio:sapdex:avg_over_time_1w
        - expr: |
            predict_linear(gitlab_sli:gitlab_component_saturation:ratio:sapdex:avg_over_time_1w[1w], 86400 * 30)
          record: gitlab_sli:gitlab_component_saturation:ratio:sapdex:avg_over_time_1w:predict_linear_30d
    - interval: 5m
      name: GitLab Usage Ping
      rules:
        - expr: sum (rate (gitlab_workhorse_http_requests_total[5m]))
          labels:
            component: http_requests
            service: workhorse
          record: gitlab_usage_ping:ops:rate5m
        - expr: |
            (
              sum(rate(gitlab_sql_duration_seconds_bucket{le="0.1"}[5m]))
              +
              sum(rate(gitlab_sql_duration_seconds_bucket{le="0.25"}[5m]))
            ) / 2 / (
              sum(rate(gitlab_sql_duration_seconds_count[5m])) > 0
            )
          record: gitlab_usage_ping:sql_duration_apdex:ratio_rate5m
        - expr: avg_over_time(gitlab_sli:gitlab_component_apdex:ratio{job="gitaly"}[5m])
          record: gitlab_usage_ping:gitaly_apdex:ratio_avg_over_time_5m
        - expr: max (instance:node_cpus:count) by (instance)
          record: gitlab_usage_ping:node_cpus:count
        - expr: max (node_memory_MemTotal_bytes) by (instance)
          record: gitlab_usage_ping:node_memory_total_bytes:max
        - expr: avg (instance:node_cpu_utilization:ratio) by (instance)
          record: gitlab_usage_ping:node_cpu_utilization:avg
        - expr: avg (instance:node_memory_utilization:ratio) by (instance)
          record: gitlab_usage_ping:node_memory_utilization:avg
        - expr: avg by (instance, job) ({__name__ =~ "(ruby_){0,1}process_resident_memory_bytes", job != "gitlab_exporter_process"})
          record: gitlab_usage_ping:node_service_process_resident_memory_bytes:avg
        - expr: avg by (instance, job) ({__name__ =~ "(ruby_){0,1}process_unique_memory_bytes", job != "gitlab_exporter_process"})
          record: gitlab_usage_ping:node_service_process_unique_memory_bytes:avg
        - expr: avg by (instance, job) ({__name__ =~ "(ruby_){0,1}process_proportional_memory_bytes", job != "gitlab_exporter_process"})
          record: gitlab_usage_ping:node_service_process_proportional_memory_bytes:avg
        - expr: |
            count by (instance, job) (
              {__name__ =~ "(ruby_){0,1}process_start_time_seconds", job != "gitlab_exporter_process"}
            )
          record: gitlab_usage_ping:node_service_process:count
        - expr: sum by (instance, job) (puma_workers)
          labels:
            server: puma
          record: gitlab_usage_ping:node_service_app_server_workers:sum
