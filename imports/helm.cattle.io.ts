// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 *
 *
 * @schema HelmChart
 */
export class HelmChart extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HelmChart"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "helm.cattle.io/v1",
    kind: "HelmChart",
  };

  /**
   * Renders a Kubernetes manifest for "HelmChart".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HelmChartProps = {}): any {
    return {
      ...HelmChart.GVK,
      ...toJson_HelmChartProps(props),
    };
  }

  /**
   * Defines a "HelmChart" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HelmChartProps = {}) {
    super(scope, id, {
      ...HelmChart.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HelmChart.GVK,
      ...toJson_HelmChartProps(resolved),
    };
  }
}

/**
 * @schema HelmChart
 */
export interface HelmChartProps {
  /**
   * @schema HelmChart#spec
   */
  readonly spec?: any;

  /**
   * @schema HelmChart#metadata
   */
  readonly metadata?: ApiObjectMetadata;
}

/**
 * Converts an object of type 'HelmChartProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmChartProps(
  obj: HelmChartProps | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    spec: obj.spec,
    metadata: obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 *
 *
 * @schema HelmChartConfig
 */
export class HelmChartConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HelmChartConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "helm.cattle.io/v1",
    kind: "HelmChartConfig",
  };

  /**
   * Renders a Kubernetes manifest for "HelmChartConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HelmChartConfigProps = {}): any {
    return {
      ...HelmChartConfig.GVK,
      ...toJson_HelmChartConfigProps(props),
    };
  }

  /**
   * Defines a "HelmChartConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: HelmChartConfigProps = {}
  ) {
    super(scope, id, {
      ...HelmChartConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HelmChartConfig.GVK,
      ...toJson_HelmChartConfigProps(resolved),
    };
  }
}

/**
 * @schema HelmChartConfig
 */
export interface HelmChartConfigProps {
  /**
   * @schema HelmChartConfig#spec
   */
  readonly spec?: any;

  /**
   * @schema HelmChartConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;
}

/**
 * Converts an object of type 'HelmChartConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmChartConfigProps(
  obj: HelmChartConfigProps | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    spec: obj.spec,
    metadata: obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */
