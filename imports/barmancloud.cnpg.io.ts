// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * ObjectStore is the Schema for the objectstores API.
 *
 * @schema ObjectStore
 */
export class ObjectStore extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ObjectStore"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'barmancloud.cnpg.io/v1',
    kind: 'ObjectStore',
  }

  /**
   * Renders a Kubernetes manifest for "ObjectStore".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ObjectStoreProps): any {
    return {
      ...ObjectStore.GVK,
      ...toJson_ObjectStoreProps(props),
    };
  }

  /**
   * Defines a "ObjectStore" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ObjectStoreProps) {
    super(scope, id, {
      ...ObjectStore.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...ObjectStore.GVK,
      ...toJson_ObjectStoreProps(resolved),
    };
  }
}

/**
 * ObjectStore is the Schema for the objectstores API.
 *
 * @schema ObjectStore
 */
export interface ObjectStoreProps {
  /**
   * @schema ObjectStore#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * Specification of the desired behavior of the ObjectStore.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
   *
   * @schema ObjectStore#spec
   */
  readonly spec: ObjectStoreSpec;
}

/**
 * Converts an object of type 'ObjectStoreProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreProps(obj: ObjectStoreProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ObjectStoreSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Specification of the desired behavior of the ObjectStore.
 * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 *
 * @schema ObjectStoreSpec
 */
export interface ObjectStoreSpec {
  /**
   * The configuration for the barman-cloud tool suite
   *
   * @schema ObjectStoreSpec#configuration
   */
  readonly configuration: ObjectStoreSpecConfiguration;

  /**
   * The configuration for the sidecar that runs in the instance pods
   *
   * @schema ObjectStoreSpec#instanceSidecarConfiguration
   */
  readonly instanceSidecarConfiguration?: ObjectStoreSpecInstanceSidecarConfiguration;

  /**
   * RetentionPolicy is the retention policy to be used for backups
   * and WALs (i.e. '60d'). The retention policy is expressed in the form
   * of `XXu` where `XX` is a positive integer and `u` is in `[dwm]` -
   * days, weeks, months.
   *
   * @schema ObjectStoreSpec#retentionPolicy
   */
  readonly retentionPolicy?: string;
}

/**
 * Converts an object of type 'ObjectStoreSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpec(obj: ObjectStoreSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': toJson_ObjectStoreSpecConfiguration(obj.configuration),
    'instanceSidecarConfiguration': toJson_ObjectStoreSpecInstanceSidecarConfiguration(obj.instanceSidecarConfiguration),
    'retentionPolicy': obj.retentionPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The configuration for the barman-cloud tool suite
 *
 * @schema ObjectStoreSpecConfiguration
 */
export interface ObjectStoreSpecConfiguration {
  /**
   * The credentials to use to upload data to Azure Blob Storage
   *
   * @schema ObjectStoreSpecConfiguration#azureCredentials
   */
  readonly azureCredentials?: ObjectStoreSpecConfigurationAzureCredentials;

  /**
   * The configuration to be used to backup the data files
   * When not defined, base backups files will be stored uncompressed and may
   * be unencrypted in the object store, according to the bucket default
   * policy.
   *
   * @schema ObjectStoreSpecConfiguration#data
   */
  readonly data?: ObjectStoreSpecConfigurationData;

  /**
   * The path where to store the backup (i.e. s3://bucket/path/to/folder)
   * this path, with different destination folders, will be used for WALs
   * and for data
   *
   * @schema ObjectStoreSpecConfiguration#destinationPath
   */
  readonly destinationPath: string;

  /**
   * EndpointCA store the CA bundle of the barman endpoint.
   * Useful when using self-signed certificates to avoid
   * errors with certificate issuer and barman-cloud-wal-archive
   *
   * @schema ObjectStoreSpecConfiguration#endpointCA
   */
  readonly endpointCa?: ObjectStoreSpecConfigurationEndpointCa;

  /**
   * Endpoint to be used to upload data to the cloud,
   * overriding the automatic endpoint discovery
   *
   * @schema ObjectStoreSpecConfiguration#endpointURL
   */
  readonly endpointUrl?: string;

  /**
   * The credentials to use to upload data to Google Cloud Storage
   *
   * @schema ObjectStoreSpecConfiguration#googleCredentials
   */
  readonly googleCredentials?: ObjectStoreSpecConfigurationGoogleCredentials;

  /**
   * HistoryTags is a list of key value pairs that will be passed to the
   * Barman --history-tags option.
   *
   * @schema ObjectStoreSpecConfiguration#historyTags
   */
  readonly historyTags?: { [key: string]: string };

  /**
   * The credentials to use to upload data to S3
   *
   * @schema ObjectStoreSpecConfiguration#s3Credentials
   */
  readonly s3Credentials?: ObjectStoreSpecConfigurationS3Credentials;

  /**
   * The server name on S3, the cluster name is used if this
   * parameter is omitted
   *
   * @schema ObjectStoreSpecConfiguration#serverName
   */
  readonly serverName?: string;

  /**
   * Tags is a list of key value pairs that will be passed to the
   * Barman --tags option.
   *
   * @schema ObjectStoreSpecConfiguration#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The configuration for the backup of the WAL stream.
   * When not defined, WAL files will be stored uncompressed and may be
   * unencrypted in the object store, according to the bucket default policy.
   *
   * @schema ObjectStoreSpecConfiguration#wal
   */
  readonly wal?: ObjectStoreSpecConfigurationWal;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfiguration' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfiguration(obj: ObjectStoreSpecConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azureCredentials': toJson_ObjectStoreSpecConfigurationAzureCredentials(obj.azureCredentials),
    'data': toJson_ObjectStoreSpecConfigurationData(obj.data),
    'destinationPath': obj.destinationPath,
    'endpointCA': toJson_ObjectStoreSpecConfigurationEndpointCa(obj.endpointCa),
    'endpointURL': obj.endpointUrl,
    'googleCredentials': toJson_ObjectStoreSpecConfigurationGoogleCredentials(obj.googleCredentials),
    'historyTags': ((obj.historyTags) === undefined) ? undefined : (Object.entries(obj.historyTags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    's3Credentials': toJson_ObjectStoreSpecConfigurationS3Credentials(obj.s3Credentials),
    'serverName': obj.serverName,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'wal': toJson_ObjectStoreSpecConfigurationWal(obj.wal),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The configuration for the sidecar that runs in the instance pods
 *
 * @schema ObjectStoreSpecInstanceSidecarConfiguration
 */
export interface ObjectStoreSpecInstanceSidecarConfiguration {
  /**
   * AdditionalContainerArgs is an optional list of command-line arguments
   * to be passed to the sidecar container when it starts.
   * The provided arguments are appended to the containerâ€™s default arguments.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfiguration#additionalContainerArgs
   */
  readonly additionalContainerArgs?: string[];

  /**
   * The environment to be explicitly passed to the sidecar
   *
   * @schema ObjectStoreSpecInstanceSidecarConfiguration#env
   */
  readonly env?: ObjectStoreSpecInstanceSidecarConfigurationEnv[];

  /**
   * The log level for PostgreSQL instances. Valid values are: `error`, `warning`, `info` (default), `debug`, `trace`
   *
   * @schema ObjectStoreSpecInstanceSidecarConfiguration#logLevel
   */
  readonly logLevel?: ObjectStoreSpecInstanceSidecarConfigurationLogLevel;

  /**
   * Resources define cpu/memory requests and limits for the sidecar that runs in the instance pods.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfiguration#resources
   */
  readonly resources?: ObjectStoreSpecInstanceSidecarConfigurationResources;

  /**
   * The retentionCheckInterval defines the frequency at which the
   * system checks and enforces retention policies.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfiguration#retentionPolicyIntervalSeconds
   */
  readonly retentionPolicyIntervalSeconds?: number;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfiguration' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfiguration(obj: ObjectStoreSpecInstanceSidecarConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalContainerArgs': obj.additionalContainerArgs?.map(y => y),
    'env': obj.env?.map(y => toJson_ObjectStoreSpecInstanceSidecarConfigurationEnv(y)),
    'logLevel': obj.logLevel,
    'resources': toJson_ObjectStoreSpecInstanceSidecarConfigurationResources(obj.resources),
    'retentionPolicyIntervalSeconds': obj.retentionPolicyIntervalSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The credentials to use to upload data to Azure Blob Storage
 *
 * @schema ObjectStoreSpecConfigurationAzureCredentials
 */
export interface ObjectStoreSpecConfigurationAzureCredentials {
  /**
   * The connection string to be used
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentials#connectionString
   */
  readonly connectionString?: ObjectStoreSpecConfigurationAzureCredentialsConnectionString;

  /**
   * Use the Azure AD based authentication without providing explicitly the keys.
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentials#inheritFromAzureAD
   */
  readonly inheritFromAzureAd?: boolean;

  /**
   * The storage account where to upload data
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentials#storageAccount
   */
  readonly storageAccount?: ObjectStoreSpecConfigurationAzureCredentialsStorageAccount;

  /**
   * The storage account key to be used in conjunction
   * with the storage account name
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentials#storageKey
   */
  readonly storageKey?: ObjectStoreSpecConfigurationAzureCredentialsStorageKey;

  /**
   * A shared-access-signature to be used in conjunction with
   * the storage account name
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentials#storageSasToken
   */
  readonly storageSasToken?: ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationAzureCredentials' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationAzureCredentials(obj: ObjectStoreSpecConfigurationAzureCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionString': toJson_ObjectStoreSpecConfigurationAzureCredentialsConnectionString(obj.connectionString),
    'inheritFromAzureAD': obj.inheritFromAzureAd,
    'storageAccount': toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageAccount(obj.storageAccount),
    'storageKey': toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageKey(obj.storageKey),
    'storageSasToken': toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken(obj.storageSasToken),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The configuration to be used to backup the data files
 * When not defined, base backups files will be stored uncompressed and may
 * be unencrypted in the object store, according to the bucket default
 * policy.
 *
 * @schema ObjectStoreSpecConfigurationData
 */
export interface ObjectStoreSpecConfigurationData {
  /**
   * AdditionalCommandArgs represents additional arguments that can be appended
   * to the 'barman-cloud-backup' command-line invocation. These arguments
   * provide flexibility to customize the backup process further according to
   * specific requirements or configurations.
   *
   * Example:
   * In a scenario where specialized backup options are required, such as setting
   * a specific timeout or defining custom behavior, users can use this field
   * to specify additional command arguments.
   *
   * Note:
   * It's essential to ensure that the provided arguments are valid and supported
   * by the 'barman-cloud-backup' command, to avoid potential errors or unintended
   * behavior during execution.
   *
   * @schema ObjectStoreSpecConfigurationData#additionalCommandArgs
   */
  readonly additionalCommandArgs?: string[];

  /**
   * Compress a backup file (a tar file per tablespace) while streaming it
   * to the object store. Available options are empty string (no
   * compression, default), `gzip`, `bzip2`, and `snappy`.
   *
   * @schema ObjectStoreSpecConfigurationData#compression
   */
  readonly compression?: ObjectStoreSpecConfigurationDataCompression;

  /**
   * Whenever to force the encryption of files (if the bucket is
   * not already configured for that).
   * Allowed options are empty string (use the bucket policy, default),
   * `AES256` and `aws:kms`
   *
   * @schema ObjectStoreSpecConfigurationData#encryption
   */
  readonly encryption?: ObjectStoreSpecConfigurationDataEncryption;

  /**
   * Control whether the I/O workload for the backup initial checkpoint will
   * be limited, according to the `checkpoint_completion_target` setting on
   * the PostgreSQL server. If set to true, an immediate checkpoint will be
   * used, meaning PostgreSQL will complete the checkpoint as soon as
   * possible. `false` by default.
   *
   * @schema ObjectStoreSpecConfigurationData#immediateCheckpoint
   */
  readonly immediateCheckpoint?: boolean;

  /**
   * The number of parallel jobs to be used to upload the backup, defaults
   * to 2
   *
   * @schema ObjectStoreSpecConfigurationData#jobs
   */
  readonly jobs?: number;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationData' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationData(obj: ObjectStoreSpecConfigurationData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalCommandArgs': obj.additionalCommandArgs?.map(y => y),
    'compression': obj.compression,
    'encryption': obj.encryption,
    'immediateCheckpoint': obj.immediateCheckpoint,
    'jobs': obj.jobs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EndpointCA store the CA bundle of the barman endpoint.
 * Useful when using self-signed certificates to avoid
 * errors with certificate issuer and barman-cloud-wal-archive
 *
 * @schema ObjectStoreSpecConfigurationEndpointCa
 */
export interface ObjectStoreSpecConfigurationEndpointCa {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationEndpointCa#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationEndpointCa#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationEndpointCa' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationEndpointCa(obj: ObjectStoreSpecConfigurationEndpointCa | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The credentials to use to upload data to Google Cloud Storage
 *
 * @schema ObjectStoreSpecConfigurationGoogleCredentials
 */
export interface ObjectStoreSpecConfigurationGoogleCredentials {
  /**
   * The secret containing the Google Cloud Storage JSON file with the credentials
   *
   * @schema ObjectStoreSpecConfigurationGoogleCredentials#applicationCredentials
   */
  readonly applicationCredentials?: ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials;

  /**
   * If set to true, will presume that it's running inside a GKE environment,
   * default to false.
   *
   * @schema ObjectStoreSpecConfigurationGoogleCredentials#gkeEnvironment
   */
  readonly gkeEnvironment?: boolean;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationGoogleCredentials' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationGoogleCredentials(obj: ObjectStoreSpecConfigurationGoogleCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationCredentials': toJson_ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials(obj.applicationCredentials),
    'gkeEnvironment': obj.gkeEnvironment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The credentials to use to upload data to S3
 *
 * @schema ObjectStoreSpecConfigurationS3Credentials
 */
export interface ObjectStoreSpecConfigurationS3Credentials {
  /**
   * The reference to the access key id
   *
   * @schema ObjectStoreSpecConfigurationS3Credentials#accessKeyId
   */
  readonly accessKeyId?: ObjectStoreSpecConfigurationS3CredentialsAccessKeyId;

  /**
   * Use the role based authentication without providing explicitly the keys.
   *
   * @schema ObjectStoreSpecConfigurationS3Credentials#inheritFromIAMRole
   */
  readonly inheritFromIamRole?: boolean;

  /**
   * The reference to the secret containing the region name
   *
   * @schema ObjectStoreSpecConfigurationS3Credentials#region
   */
  readonly region?: ObjectStoreSpecConfigurationS3CredentialsRegion;

  /**
   * The reference to the secret access key
   *
   * @schema ObjectStoreSpecConfigurationS3Credentials#secretAccessKey
   */
  readonly secretAccessKey?: ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey;

  /**
   * The references to the session key
   *
   * @schema ObjectStoreSpecConfigurationS3Credentials#sessionToken
   */
  readonly sessionToken?: ObjectStoreSpecConfigurationS3CredentialsSessionToken;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationS3Credentials' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationS3Credentials(obj: ObjectStoreSpecConfigurationS3Credentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessKeyId': toJson_ObjectStoreSpecConfigurationS3CredentialsAccessKeyId(obj.accessKeyId),
    'inheritFromIAMRole': obj.inheritFromIamRole,
    'region': toJson_ObjectStoreSpecConfigurationS3CredentialsRegion(obj.region),
    'secretAccessKey': toJson_ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey(obj.secretAccessKey),
    'sessionToken': toJson_ObjectStoreSpecConfigurationS3CredentialsSessionToken(obj.sessionToken),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The configuration for the backup of the WAL stream.
 * When not defined, WAL files will be stored uncompressed and may be
 * unencrypted in the object store, according to the bucket default policy.
 *
 * @schema ObjectStoreSpecConfigurationWal
 */
export interface ObjectStoreSpecConfigurationWal {
  /**
   * Additional arguments that can be appended to the 'barman-cloud-wal-archive'
   * command-line invocation. These arguments provide flexibility to customize
   * the WAL archive process further, according to specific requirements or configurations.
   *
   * Example:
   * In a scenario where specialized backup options are required, such as setting
   * a specific timeout or defining custom behavior, users can use this field
   * to specify additional command arguments.
   *
   * Note:
   * It's essential to ensure that the provided arguments are valid and supported
   * by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
   * behavior during execution.
   *
   * @schema ObjectStoreSpecConfigurationWal#archiveAdditionalCommandArgs
   */
  readonly archiveAdditionalCommandArgs?: string[];

  /**
   * Compress a WAL file before sending it to the object store. Available
   * options are empty string (no compression, default), `gzip`, `bzip2`,
   * `lz4`, `snappy`, `xz`, and `zstd`.
   *
   * @schema ObjectStoreSpecConfigurationWal#compression
   */
  readonly compression?: ObjectStoreSpecConfigurationWalCompression;

  /**
   * Whenever to force the encryption of files (if the bucket is
   * not already configured for that).
   * Allowed options are empty string (use the bucket policy, default),
   * `AES256` and `aws:kms`
   *
   * @schema ObjectStoreSpecConfigurationWal#encryption
   */
  readonly encryption?: ObjectStoreSpecConfigurationWalEncryption;

  /**
   * Number of WAL files to be either archived in parallel (when the
   * PostgreSQL instance is archiving to a backup object store) or
   * restored in parallel (when a PostgreSQL standby is fetching WAL
   * files from a recovery object store). If not specified, WAL files
   * will be processed one at a time. It accepts a positive integer as a
   * value - with 1 being the minimum accepted value.
   *
   * @schema ObjectStoreSpecConfigurationWal#maxParallel
   */
  readonly maxParallel?: number;

  /**
   * Additional arguments that can be appended to the 'barman-cloud-wal-restore'
   * command-line invocation. These arguments provide flexibility to customize
   * the WAL restore process further, according to specific requirements or configurations.
   *
   * Example:
   * In a scenario where specialized backup options are required, such as setting
   * a specific timeout or defining custom behavior, users can use this field
   * to specify additional command arguments.
   *
   * Note:
   * It's essential to ensure that the provided arguments are valid and supported
   * by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
   * behavior during execution.
   *
   * @schema ObjectStoreSpecConfigurationWal#restoreAdditionalCommandArgs
   */
  readonly restoreAdditionalCommandArgs?: string[];
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationWal' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationWal(obj: ObjectStoreSpecConfigurationWal | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'archiveAdditionalCommandArgs': obj.archiveAdditionalCommandArgs?.map(y => y),
    'compression': obj.compression,
    'encryption': obj.encryption,
    'maxParallel': obj.maxParallel,
    'restoreAdditionalCommandArgs': obj.restoreAdditionalCommandArgs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnv
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnv {
  /**
   * Name of the environment variable.
   * May consist of any printable ASCII characters except '='.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded
   * using the previously defined environment variables in the container and
   * any service environment variables. If a variable cannot be resolved,
   * the reference in the input string will be unchanged. Double $$ are reduced
   * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
   * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
   * Escaped references will never be expanded, regardless of whether the variable
   * exists or not.
   * Defaults to "".
   *
   * @default .
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnv#valueFrom
   */
  readonly valueFrom?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnv' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnv(obj: ObjectStoreSpecInstanceSidecarConfigurationEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The log level for PostgreSQL instances. Valid values are: `error`, `warning`, `info` (default), `debug`, `trace`
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationLogLevel
 */
export enum ObjectStoreSpecInstanceSidecarConfigurationLogLevel {
  /** error */
  ERROR = "error",
  /** warning */
  WARNING = "warning",
  /** info */
  INFO = "info",
  /** debug */
  DEBUG = "debug",
  /** trace */
  TRACE = "trace",
}

/**
 * Resources define cpu/memory requests and limits for the sidecar that runs in the instance pods.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationResources
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationResources {
  /**
   * Claims lists the names of resources, defined in spec.resourceClaims,
   * that are used by this container.
   *
   * This field depends on the
   * DynamicResourceAllocation feature gate.
   *
   * This field is immutable. It can only be set for containers.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationResources#claims
   */
  readonly claims?: ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims[];

  /**
   * Limits describes the maximum amount of compute resources allowed.
   * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationResources#limits
   */
  readonly limits?: { [key: string]: ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required.
   * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
   * otherwise to an implementation-defined value. Requests cannot exceed Limits.
   * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationResources#requests
   */
  readonly requests?: { [key: string]: ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests };
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationResources' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationResources(obj: ObjectStoreSpecInstanceSidecarConfigurationResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claims': obj.claims?.map(y => toJson_ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims(y)),
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The connection string to be used
 *
 * @schema ObjectStoreSpecConfigurationAzureCredentialsConnectionString
 */
export interface ObjectStoreSpecConfigurationAzureCredentialsConnectionString {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsConnectionString#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsConnectionString#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationAzureCredentialsConnectionString' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationAzureCredentialsConnectionString(obj: ObjectStoreSpecConfigurationAzureCredentialsConnectionString | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The storage account where to upload data
 *
 * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageAccount
 */
export interface ObjectStoreSpecConfigurationAzureCredentialsStorageAccount {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageAccount#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageAccount#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationAzureCredentialsStorageAccount' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageAccount(obj: ObjectStoreSpecConfigurationAzureCredentialsStorageAccount | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The storage account key to be used in conjunction
 * with the storage account name
 *
 * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageKey
 */
export interface ObjectStoreSpecConfigurationAzureCredentialsStorageKey {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageKey#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageKey#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationAzureCredentialsStorageKey' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageKey(obj: ObjectStoreSpecConfigurationAzureCredentialsStorageKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * A shared-access-signature to be used in conjunction with
 * the storage account name
 *
 * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken
 */
export interface ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken(obj: ObjectStoreSpecConfigurationAzureCredentialsStorageSasToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Compress a backup file (a tar file per tablespace) while streaming it
 * to the object store. Available options are empty string (no
 * compression, default), `gzip`, `bzip2`, and `snappy`.
 *
 * @schema ObjectStoreSpecConfigurationDataCompression
 */
export enum ObjectStoreSpecConfigurationDataCompression {
  /** bzip2 */
  BZIP2 = "bzip2",
  /** gzip */
  GZIP = "gzip",
  /** snappy */
  SNAPPY = "snappy",
}

/**
 * Whenever to force the encryption of files (if the bucket is
 * not already configured for that).
 * Allowed options are empty string (use the bucket policy, default),
 * `AES256` and `aws:kms`
 *
 * @schema ObjectStoreSpecConfigurationDataEncryption
 */
export enum ObjectStoreSpecConfigurationDataEncryption {
  /** AES256 */
  AES256 = "AES256",
  /** aws:kms */
  AWS_KMS = "aws:kms",
}

/**
 * The secret containing the Google Cloud Storage JSON file with the credentials
 *
 * @schema ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials
 */
export interface ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials(obj: ObjectStoreSpecConfigurationGoogleCredentialsApplicationCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The reference to the access key id
 *
 * @schema ObjectStoreSpecConfigurationS3CredentialsAccessKeyId
 */
export interface ObjectStoreSpecConfigurationS3CredentialsAccessKeyId {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsAccessKeyId#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsAccessKeyId#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationS3CredentialsAccessKeyId' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationS3CredentialsAccessKeyId(obj: ObjectStoreSpecConfigurationS3CredentialsAccessKeyId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The reference to the secret containing the region name
 *
 * @schema ObjectStoreSpecConfigurationS3CredentialsRegion
 */
export interface ObjectStoreSpecConfigurationS3CredentialsRegion {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsRegion#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsRegion#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationS3CredentialsRegion' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationS3CredentialsRegion(obj: ObjectStoreSpecConfigurationS3CredentialsRegion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The reference to the secret access key
 *
 * @schema ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey
 */
export interface ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey(obj: ObjectStoreSpecConfigurationS3CredentialsSecretAccessKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * The references to the session key
 *
 * @schema ObjectStoreSpecConfigurationS3CredentialsSessionToken
 */
export interface ObjectStoreSpecConfigurationS3CredentialsSessionToken {
  /**
   * The key to select
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsSessionToken#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   *
   * @schema ObjectStoreSpecConfigurationS3CredentialsSessionToken#name
   */
  readonly name: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecConfigurationS3CredentialsSessionToken' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecConfigurationS3CredentialsSessionToken(obj: ObjectStoreSpecConfigurationS3CredentialsSessionToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Compress a WAL file before sending it to the object store. Available
 * options are empty string (no compression, default), `gzip`, `bzip2`,
 * `lz4`, `snappy`, `xz`, and `zstd`.
 *
 * @schema ObjectStoreSpecConfigurationWalCompression
 */
export enum ObjectStoreSpecConfigurationWalCompression {
  /** bzip2 */
  BZIP2 = "bzip2",
  /** gzip */
  GZIP = "gzip",
  /** lz4 */
  LZ4 = "lz4",
  /** snappy */
  SNAPPY = "snappy",
  /** xz */
  XZ = "xz",
  /** zstd */
  ZSTD = "zstd",
}

/**
 * Whenever to force the encryption of files (if the bucket is
 * not already configured for that).
 * Allowed options are empty string (use the bucket policy, default),
 * `AES256` and `aws:kms`
 *
 * @schema ObjectStoreSpecConfigurationWalEncryption
 */
export enum ObjectStoreSpecConfigurationWalEncryption {
  /** AES256 */
  AES256 = "AES256",
  /** aws:kms */
  AWS_KMS = "aws:kms",
}

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
   * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom#fieldRef
   */
  readonly fieldRef?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef;

  /**
   * FileKeyRef selects a key of the env file.
   * Requires the EnvFiles feature gate to be enabled.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom#fileKeyRef
   */
  readonly fileKeyRef?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef;

  /**
   * Selects a resource of the container: only resources limits and requests
   * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef(obj.fieldRef),
    'fileKeyRef': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef(obj.fileKeyRef),
    'resourceFieldRef': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ResourceClaim references one entry in PodSpec.ResourceClaims.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims {
  /**
   * Name must match the name of one entry in pod.spec.resourceClaims of
   * the Pod where this field is used. It makes that resource available
   * inside a container.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims#name
   */
  readonly name: string;

  /**
   * Request is the name chosen for a request in the referenced claim.
   * If empty, everything from the claim is made available, otherwise
   * only the result of this request.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims#request
   */
  readonly request?: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims(obj: ObjectStoreSpecInstanceSidecarConfigurationResourcesClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits
 */
export class ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits {
  public static fromNumber(value: number): ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits {
    return new ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits(value);
  }
  public static fromString(value: string): ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits {
    return new ObjectStoreSpecInstanceSidecarConfigurationResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests
 */
export class ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests {
  public static fromNumber(value: number): ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests {
    return new ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests(value);
  }
  public static fromString(value: string): ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests {
    return new ObjectStoreSpecInstanceSidecarConfigurationResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Selects a key of a ConfigMap.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
 * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * FileKeyRef selects a key of the env file.
 * Requires the EnvFiles feature gate to be enabled.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef {
  /**
   * The key within the env file. An invalid key will prevent the pod from starting.
   * The keys defined within a source may consist of any printable ASCII characters except '='.
   * During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef#key
   */
  readonly key: string;

  /**
   * Specify whether the file or its key must be defined. If the file or key
   * does not exist, then the env var is not published.
   * If optional is set to true and the specified key does not exist,
   * the environment variable will not be set in the Pod's containers.
   *
   * If optional is set to false and the specified key does not exist,
   * an error will be returned during Pod creation.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef#optional
   */
  readonly optional?: boolean;

  /**
   * The path within the volume from which to select the file.
   * Must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef#path
   */
  readonly path: string;

  /**
   * The name of the volume mount containing the env file.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef#volumeName
   */
  readonly volumeName: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromFileKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'optional': obj.optional,
    'path': obj.path,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a resource of the container: only resources limits and requests
 * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef
 */
export interface ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;
}

/**
 * Converts an object of type 'ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef(obj: ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor
 */
export class ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor {
    return new ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor {
    return new ObjectStoreSpecInstanceSidecarConfigurationEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

