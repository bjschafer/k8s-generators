/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Values {
  /**
   * Secrets used for pulling images
   */
  imagePullSecrets?: {
    name: string;
  }[];
  /**
   * Override chart name
   */
  nameOverride?: string;
  /**
   * Override fully qualified app name
   */
  fullNameOverride?: string;
  /**
   * MetalLB configuration
   */
  configInLine?: {
    [k: string]: unknown;
  };
  loadBalancerClass?: string;
  /**
   * RBAC configuration
   */
  rbac?: {
    /**
     * Enable RBAC
     */
    create?: boolean;
    [k: string]: unknown;
  };
  /**
   * Prometheus monitoring config
   */
  prometheus?: {
    scrapeAnnotations?: boolean;
    metricsPort?: number;
    secureMetricsPort?: number;
    rbacPrometheus?: boolean;
    serviceAccount?: string;
    namespace?: string;
    /**
     * kube-rbac-proxy configuration
     */
    rbacProxy?: {
      repository?: string;
      tag?: string;
      [k: string]: unknown;
    };
    /**
     * Prometheus Operator PodMonitors
     */
    podMonitor: {
      enabled?: boolean;
      additionalMonitors?: {
        [k: string]: unknown;
      };
      jobLabel?: string;
      interval?: number | null;
      metricRelabelings?: {
        [k: string]: unknown;
      }[];
      relabelings?: {
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    /**
     * Prometheus Operator ServiceMonitors
     */
    serviceMonitor?: {
      enabled?: boolean;
      jobLabel?: string;
      interval?: number | null;
      metricRelabelings?: {
        [k: string]: unknown;
      }[];
      relabelings?: {
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    /**
     * Prometheus Operator alertmanager alerts
     */
    prometheusRule: {
      enabled: boolean;
      additionalMonitors?: {
        [k: string]: unknown;
      };
      staleConfig: PrometheusAlert;
      configNotLoaded: PrometheusAlert;
      addressPoolExhausted: PrometheusAlert;
      addressPoolUsage: {
        enabled: boolean;
        thresholds?: {
          percent: number;
          labels?: {
            [k: string]: string;
          };
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      bgpSessionDown: PrometheusAlert;
      extraAlerts?: {
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  controller: Component & {
    strategy?: {
      type: string;
      [k: string]: unknown;
    };
    command?: string;
    webhookMode?: string;
    extraContainers?: {
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  speaker: Component & {
    tolerateMaster: boolean;
    memberlist?: {
      enabled?: boolean;
      mlBindPort?: number;
      mlBindAddrOverride?: string;
      mlSecretKeyPath?: string;
      [k: string]: unknown;
    };
    excludeInterfaces?: {
      enabled?: boolean;
      [k: string]: unknown;
    };
    ignoreExcludeLB?: boolean;
    updateStrategy?: {
      type: string;
      [k: string]: unknown;
    };
    runtimeClassName?: string;
    securityContext?: {
      [k: string]: unknown;
    };
    secretName?: string;
    /**
     * Install FRR container in speaker deployment
     */
    frr?: {
      enabled: boolean;
      image?: Image;
      metricsPort?: number;
      secureMetricsPort?: number;
      "resources:"?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    command?: string;
    reloader?: {
      resources?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    frrMetrics?: {
      resources?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    extraContainers?: {
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  /**
   * CRD configuration
   */
  crds?: {
    /**
     * Enable CRDs
     */
    enabled?: boolean;
    /**
     * Failure policy to use with validating webhooks
     */
    validationFailurePolicy?: "Ignore" | "Fail";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface PrometheusAlert {
  enabled: boolean;
  labels?: {
    [k: string]: string;
  };
  [k: string]: unknown;
}
export interface Component {
  enabled?: boolean;
  logLevel?: "all" | "debug" | "info" | "warn" | "error" | "none";
  image: Image;
  serviceAccount: {
    create?: boolean;
    name?: string;
    annotations?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  resources?: {
    [k: string]: unknown;
  };
  nodeSelector?: {
    [k: string]: unknown;
  };
  tolerations?: {
    [k: string]: unknown;
  }[];
  priorityClassName?: string;
  runtimeClassName?: string;
  affinity?: {
    [k: string]: unknown;
  };
  podAnnotations?: {
    [k: string]: unknown;
  };
  livenessProbe?: Probe;
  readinessProbe?: Probe;
  [k: string]: unknown;
}
export interface Image {
  repository?: string;
  tag?: string | null;
  pullPolicy?: null | ("Always" | "IfNotPresent" | "Never");
  [k: string]: unknown;
}
export interface Probe {
  enabled?: boolean;
  failureThreshold: number;
  initialDelaySeconds: number;
  periodSeconds: number;
  successThreshold: number;
  timeoutSeconds: number;
  [k: string]: unknown;
}
