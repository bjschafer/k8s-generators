/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SchemaForVeleroHelmChart {
  namespace?: {
    labels?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  image: {
    repository: string;
    tag: string;
    pullPolicy: string;
    imagePullSecrets?: unknown[];
    [k: string]: unknown;
  };
  nameOverride?: string;
  fullnameOverride?: string;
  annotations?: {
    [k: string]: unknown;
  };
  secretAnnotations?: {
    [k: string]: unknown;
  };
  labels?: {
    [k: string]: unknown;
  };
  podAnnotations?: {
    [k: string]: unknown;
  };
  podLabels?: {
    [k: string]: unknown;
  };
  resources?: {
    [k: string]: unknown;
  };
  upgradeJobResources?: {
    [k: string]: unknown;
  };
  upgradeCRDsJob: {
    extraVolumes?: unknown[];
    extraVolumeMounts?: unknown[];
    extraEnvVars?: unknown[];
    automountServiceAccountToken: boolean;
    [k: string]: unknown;
  };
  dnsPolicy: string;
  initContainers?: unknown[] | string | null;
  podSecurityContext?: {
    [k: string]: unknown;
  };
  containerSecurityContext?: {
    [k: string]: unknown;
  };
  lifecycle?: {
    [k: string]: unknown;
  };
  priorityClassName?: string;
  runtimeClassName?: string;
  terminationGracePeriodSeconds?: number;
  livenessProbe?: {
    [k: string]: unknown;
  };
  readinessProbe?: {
    [k: string]: unknown;
  };
  tolerations?: unknown[];
  affinity?: {
    [k: string]: unknown;
  };
  nodeSelector?: {
    [k: string]: unknown;
  };
  dnsConfig?: {
    [k: string]: unknown;
  };
  extraVolumes?: unknown[];
  extraVolumeMounts?: unknown[];
  extraObjects?: unknown[];
  metrics: {
    enabled: boolean;
    scrapeInterval?: string;
    scrapeTimeout?: string;
    service: {
      annotations?: {
        [k: string]: unknown;
      };
      labels?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    podAnnotations: {
      "prometheus.io/scrape"?: string;
      "prometheus.io/port"?: string;
      "prometheus.io/path"?: string;
      [k: string]: unknown;
    };
    serviceMonitor: {
      autodetect: boolean;
      enabled: boolean;
      annotations?: {
        [k: string]: unknown;
      };
      additionalLabels?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    nodeAgentPodMonitor: {
      autodetect: boolean;
      enabled: boolean;
      annotations?: {
        [k: string]: unknown;
      };
      additionalLabels?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    prometheusRule: {
      autodetect: boolean;
      enabled: boolean;
      additionalLabels?: {
        [k: string]: unknown;
      };
      spec?: unknown[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  kubectl: {
    image: {
      repository: string;
      [k: string]: unknown;
    };
    containerSecurityContext?: {
      [k: string]: unknown;
    };
    resources?: {
      [k: string]: unknown;
    };
    annotations?: {
      [k: string]: unknown;
    };
    labels?: {
      [k: string]: unknown;
    };
    extraVolumes?: unknown[];
    extraVolumeMounts?: unknown[];
    [k: string]: unknown;
  };
  upgradeCRDs?: boolean;
  cleanUpCRDs?: boolean;
  configuration: {
    backupStorageLocation?: {
      name?: string | null;
      provider: string;
      bucket: string;
      caCert?: string | null;
      prefix?: string | null;
      default?: boolean | null;
      validationFrequency?: string | null;
      accessMode?: string | null;
      credential?: {
        [k: string]: unknown;
      };
      config?: {
        [k: string]: unknown;
      };
      annotations?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }[];
    volumeSnapshotLocation?: {
      name?: string | null;
      provider: string;
      credential?: {
        [k: string]: unknown;
      };
      config?: {
        [k: string]: unknown;
      };
      annotations?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }[];
    repositoryMaintenanceJob?: {
      requests?: {
        cpu?: string;
        memory?: string;
        [k: string]: unknown;
      } | null;
      limits?: {
        cpu?: string;
        memory?: string;
        [k: string]: unknown;
      } | null;
      latestJobsCount?: number;
      repositoryConfigData?: {
        /**
         * Name of the ConfigMap to create for per-repository maintenance configuration
         */
        name?: string;
        /**
         * Global configuration applied to all repositories when no specific repository configuration is found
         */
        global?: {
          podResources?: {
            cpuRequest?: string;
            cpuLimit?: string;
            memoryRequest?: string;
            memoryLimit?: string;
            [k: string]: unknown;
          };
          keepLatestMaintenanceJobs?: number;
          priorityClassName?: string;
          loadAffinity?: {
            nodeSelector?: {
              [k: string]: unknown;
            };
            [k: string]: unknown;
          }[];
          [k: string]: unknown;
        };
        /**
         * Repository-specific configurations keyed by repository identifier (namespace-storageLocation-repositoryType)
         */
        repositories?: {
          [k: string]: {
            podResources?: {
              cpuRequest?: string;
              cpuLimit?: string;
              memoryRequest?: string;
              memoryLimit?: string;
              [k: string]: unknown;
            };
            keepLatestMaintenanceJobs?: number;
            loadAffinity?: {
              nodeSelector?: {
                [k: string]: unknown;
              };
              [k: string]: unknown;
            }[];
            [k: string]: unknown;
          };
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    namespace?: string | null;
    extraArgs?: unknown[];
    extraEnvVars?: unknown[];
    [k: string]: unknown;
  };
  rbac: {
    create: boolean;
    clusterAdministrator: boolean;
    clusterAdministratorName: string;
    [k: string]: unknown;
  };
  serviceAccount: {
    server: {
      create: boolean;
      name?: string | null;
      annotations?: {
        [k: string]: unknown;
      } | null;
      labels?: {
        [k: string]: unknown;
      } | null;
      imagePullSecrets?: string[];
      automountServiceAccountToken: boolean;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  credentials: {
    useSecret?: boolean;
    name?: string | null;
    existingSecret?: string | null;
    secretContents?: {
      [k: string]: unknown;
    };
    extraEnvVars?: {
      [k: string]: unknown;
    };
    extraSecretRef?: string;
    [k: string]: unknown;
  };
  backupsEnabled?: boolean;
  snapshotsEnabled?: boolean;
  deployNodeAgent?: boolean;
  nodeAgent?: {
    podVolumePath: string;
    pluginVolumePath?: string;
    priorityClassName?: string;
    runtimeClassName?: string;
    resources?: {
      [k: string]: unknown;
    };
    tolerations?: unknown[];
    annotations?: {
      [k: string]: unknown;
    };
    labels?: {
      [k: string]: unknown;
    };
    podLabels?: {
      [k: string]: unknown;
    };
    useScratchEmptyDir?: boolean;
    extraVolumes?: unknown[];
    extraVolumeMounts?: unknown[];
    extraEnvVars?: unknown[];
    extraArgs?: unknown[];
    dnsPolicy: string;
    podSecurityContext?: {
      [k: string]: unknown;
    };
    containerSecurityContext?: {
      [k: string]: unknown;
    };
    lifecycle?: {
      [k: string]: unknown;
    };
    nodeSelector?: {
      [k: string]: unknown;
    };
    affinity?: {
      [k: string]: unknown;
    };
    dnsConfig?: {
      [k: string]: unknown;
    };
    updateStrategy?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  schedules?: {
    [k: string]: unknown;
  };
  configMaps: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
