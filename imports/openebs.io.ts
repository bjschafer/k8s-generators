// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Auto-generated derived type for DiskPoolSpec via `CustomResource`
 *
 * @schema DiskPool
 */
export class DiskPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DiskPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'openebs.io/v1beta2',
    kind: 'DiskPool',
  }

  /**
   * Renders a Kubernetes manifest for "DiskPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DiskPoolProps): any {
    return {
      ...DiskPool.GVK,
      ...toJson_DiskPoolProps(props),
    };
  }

  /**
   * Defines a "DiskPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DiskPoolProps) {
    super(scope, id, {
      ...DiskPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DiskPool.GVK,
      ...toJson_DiskPoolProps(resolved),
    };
  }
}

/**
 * Auto-generated derived type for DiskPoolSpec via `CustomResource`
 *
 * @schema DiskPool
 */
export interface DiskPoolProps {
  /**
   * @schema DiskPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * The pool spec which contains the parameters we use when creating the pool
   *
   * @schema DiskPool#spec
   */
  readonly spec: DiskPoolSpec;

}

/**
 * Converts an object of type 'DiskPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DiskPoolProps(obj: DiskPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DiskPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The pool spec which contains the parameters we use when creating the pool
 *
 * @schema DiskPoolSpec
 */
export interface DiskPoolSpec {
  /**
   * The disk device the pool is located on
   *
   * @schema DiskPoolSpec#disks
   */
  readonly disks: string[];

  /**
   * The node the pool is placed on
   *
   * @schema DiskPoolSpec#node
   */
  readonly node: string;

  /**
   * The topology for data placement.
   *
   * @schema DiskPoolSpec#topology
   */
  readonly topology?: DiskPoolSpecTopology;

}

/**
 * Converts an object of type 'DiskPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DiskPoolSpec(obj: DiskPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disks': obj.disks?.map(y => y),
    'node': obj.node,
    'topology': toJson_DiskPoolSpecTopology(obj.topology),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The topology for data placement.
 *
 * @schema DiskPoolSpecTopology
 */
export interface DiskPoolSpecTopology {
  /**
   * Label for topology
   *
   * @schema DiskPoolSpecTopology#labelled
   */
  readonly labelled?: { [key: string]: string };

}

/**
 * Converts an object of type 'DiskPoolSpecTopology' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DiskPoolSpecTopology(obj: DiskPoolSpecTopology | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelled': ((obj.labelled) === undefined) ? undefined : (Object.entries(obj.labelled).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

