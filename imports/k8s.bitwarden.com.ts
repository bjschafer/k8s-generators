// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * BitwardenSecret is the Schema for the bitwardensecrets API
 *
 * @schema BitwardenSecret
 */
export class BitwardenSecret extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BitwardenSecret"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'k8s.bitwarden.com/v1',
    kind: 'BitwardenSecret',
  }

  /**
   * Renders a Kubernetes manifest for "BitwardenSecret".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BitwardenSecretProps = {}): any {
    return {
      ...BitwardenSecret.GVK,
      ...toJson_BitwardenSecretProps(props),
    };
  }

  /**
   * Defines a "BitwardenSecret" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BitwardenSecretProps = {}) {
    super(scope, id, {
      ...BitwardenSecret.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BitwardenSecret.GVK,
      ...toJson_BitwardenSecretProps(resolved),
    };
  }
}

/**
 * BitwardenSecret is the Schema for the bitwardensecrets API
 *
 * @schema BitwardenSecret
 */
export interface BitwardenSecretProps {
  /**
   * @schema BitwardenSecret#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * BitwardenSecretSpec defines the desired state of BitwardenSecret
   *
   * @schema BitwardenSecret#spec
   */
  readonly spec?: BitwardenSecretSpec;

}

/**
 * Converts an object of type 'BitwardenSecretProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BitwardenSecretProps(obj: BitwardenSecretProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BitwardenSecretSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BitwardenSecretSpec defines the desired state of BitwardenSecret
 *
 * @schema BitwardenSecretSpec
 */
export interface BitwardenSecretSpec {
  /**
   * The secret key reference for the authorization token used to connect to Secrets Manager
   *
   * @schema BitwardenSecretSpec#authToken
   */
  readonly authToken: BitwardenSecretSpecAuthToken;

  /**
   * The mapping of organization secret IDs to K8s secret keys.  This helps improve readability and mapping to environment variables.
   *
   * @schema BitwardenSecretSpec#map
   */
  readonly map?: BitwardenSecretSpecMap[];

  /**
   * The organization ID for your organization
   *
   * @schema BitwardenSecretSpec#organizationId
   */
  readonly organizationId: string;

  /**
   * The name of the secret for the
   *
   * @schema BitwardenSecretSpec#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'BitwardenSecretSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BitwardenSecretSpec(obj: BitwardenSecretSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authToken': toJson_BitwardenSecretSpecAuthToken(obj.authToken),
    'map': obj.map?.map(y => toJson_BitwardenSecretSpecMap(y)),
    'organizationId': obj.organizationId,
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The secret key reference for the authorization token used to connect to Secrets Manager
 *
 * @schema BitwardenSecretSpecAuthToken
 */
export interface BitwardenSecretSpecAuthToken {
  /**
   * The key of the Kubernetes secret where the authorization token is stored
   *
   * @schema BitwardenSecretSpecAuthToken#secretKey
   */
  readonly secretKey: string;

  /**
   * The name of the Kubernetes secret where the authorization token is stored
   *
   * @schema BitwardenSecretSpecAuthToken#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'BitwardenSecretSpecAuthToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BitwardenSecretSpecAuthToken(obj: BitwardenSecretSpecAuthToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKey': obj.secretKey,
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BitwardenSecretSpecMap
 */
export interface BitwardenSecretSpecMap {
  /**
   * The ID of the secret in Secrets Manager
   *
   * @schema BitwardenSecretSpecMap#bwSecretId
   */
  readonly bwSecretId: string;

  /**
   * The name of the mapped key in the created Kubernetes secret
   *
   * @schema BitwardenSecretSpecMap#secretKeyName
   */
  readonly secretKeyName: string;

}

/**
 * Converts an object of type 'BitwardenSecretSpecMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BitwardenSecretSpecMap(obj: BitwardenSecretSpecMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bwSecretId': obj.bwSecretId,
    'secretKeyName': obj.secretKeyName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

