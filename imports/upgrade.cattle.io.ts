// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema Plan
 */
export class Plan extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Plan"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'upgrade.cattle.io/v1',
    kind: 'Plan',
  }

  /**
   * Renders a Kubernetes manifest for "Plan".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PlanProps = {}): any {
    return {
      ...Plan.GVK,
      ...toJson_PlanProps(props),
    };
  }

  /**
   * Defines a "Plan" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PlanProps = {}) {
    super(scope, id, {
      ...Plan.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Plan.GVK,
      ...toJson_PlanProps(resolved),
    };
  }
}

/**
 * @schema Plan
 */
export interface PlanProps {
  /**
   * @schema Plan#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema Plan#spec
   */
  readonly spec?: PlanSpec;

}

/**
 * Converts an object of type 'PlanProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanProps(obj: PlanProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PlanSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpec
 */
export interface PlanSpec {
  /**
   * @schema PlanSpec#channel
   */
  readonly channel?: string;

  /**
   * @schema PlanSpec#concurrency
   */
  readonly concurrency?: number;

  /**
   * @schema PlanSpec#cordon
   */
  readonly cordon?: boolean;

  /**
   * @schema PlanSpec#drain
   */
  readonly drain?: PlanSpecDrain;

  /**
   * @schema PlanSpec#exclusive
   */
  readonly exclusive?: boolean;

  /**
   * @schema PlanSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: PlanSpecImagePullSecrets[];

  /**
   * @schema PlanSpec#jobActiveDeadlineSecs
   */
  readonly jobActiveDeadlineSecs?: number;

  /**
   * @schema PlanSpec#nodeSelector
   */
  readonly nodeSelector?: PlanSpecNodeSelector;

  /**
   * @schema PlanSpec#postCompleteDelay
   */
  readonly postCompleteDelay?: string;

  /**
   * @schema PlanSpec#prepare
   */
  readonly prepare?: PlanSpecPrepare;

  /**
   * @schema PlanSpec#secrets
   */
  readonly secrets?: PlanSpecSecrets[];

  /**
   * @schema PlanSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * @schema PlanSpec#tolerations
   */
  readonly tolerations?: PlanSpecTolerations[];

  /**
   * @schema PlanSpec#upgrade
   */
  readonly upgrade: PlanSpecUpgrade;

  /**
   * @schema PlanSpec#version
   */
  readonly version?: string;

  /**
   * @schema PlanSpec#window
   */
  readonly window?: PlanSpecWindow;

}

/**
 * Converts an object of type 'PlanSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpec(obj: PlanSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
    'concurrency': obj.concurrency,
    'cordon': obj.cordon,
    'drain': toJson_PlanSpecDrain(obj.drain),
    'exclusive': obj.exclusive,
    'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_PlanSpecImagePullSecrets(y)),
    'jobActiveDeadlineSecs': obj.jobActiveDeadlineSecs,
    'nodeSelector': toJson_PlanSpecNodeSelector(obj.nodeSelector),
    'postCompleteDelay': obj.postCompleteDelay,
    'prepare': toJson_PlanSpecPrepare(obj.prepare),
    'secrets': obj.secrets?.map(y => toJson_PlanSpecSecrets(y)),
    'serviceAccountName': obj.serviceAccountName,
    'tolerations': obj.tolerations?.map(y => toJson_PlanSpecTolerations(y)),
    'upgrade': toJson_PlanSpecUpgrade(obj.upgrade),
    'version': obj.version,
    'window': toJson_PlanSpecWindow(obj.window),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecDrain
 */
export interface PlanSpecDrain {
  /**
   * @schema PlanSpecDrain#deleteEmptydirData
   */
  readonly deleteEmptydirData?: boolean;

  /**
   * @schema PlanSpecDrain#deleteLocalData
   */
  readonly deleteLocalData?: boolean;

  /**
   * @schema PlanSpecDrain#disableEviction
   */
  readonly disableEviction?: boolean;

  /**
   * @schema PlanSpecDrain#force
   */
  readonly force?: boolean;

  /**
   * @schema PlanSpecDrain#gracePeriod
   */
  readonly gracePeriod?: number;

  /**
   * @schema PlanSpecDrain#ignoreDaemonSets
   */
  readonly ignoreDaemonSets?: boolean;

  /**
   * @schema PlanSpecDrain#podSelector
   */
  readonly podSelector?: PlanSpecDrainPodSelector;

  /**
   * @schema PlanSpecDrain#skipWaitForDeleteTimeout
   */
  readonly skipWaitForDeleteTimeout?: number;

  /**
   * @schema PlanSpecDrain#timeout
   */
  readonly timeout?: number;

}

/**
 * Converts an object of type 'PlanSpecDrain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecDrain(obj: PlanSpecDrain | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deleteEmptydirData': obj.deleteEmptydirData,
    'deleteLocalData': obj.deleteLocalData,
    'disableEviction': obj.disableEviction,
    'force': obj.force,
    'gracePeriod': obj.gracePeriod,
    'ignoreDaemonSets': obj.ignoreDaemonSets,
    'podSelector': toJson_PlanSpecDrainPodSelector(obj.podSelector),
    'skipWaitForDeleteTimeout': obj.skipWaitForDeleteTimeout,
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecImagePullSecrets
 */
export interface PlanSpecImagePullSecrets {
  /**
   * @schema PlanSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PlanSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecImagePullSecrets(obj: PlanSpecImagePullSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecNodeSelector
 */
export interface PlanSpecNodeSelector {
  /**
   * @schema PlanSpecNodeSelector#matchExpressions
   */
  readonly matchExpressions?: PlanSpecNodeSelectorMatchExpressions[];

  /**
   * @schema PlanSpecNodeSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PlanSpecNodeSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecNodeSelector(obj: PlanSpecNodeSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PlanSpecNodeSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepare
 */
export interface PlanSpecPrepare {
  /**
   * @schema PlanSpecPrepare#args
   */
  readonly args?: string[];

  /**
   * @schema PlanSpecPrepare#command
   */
  readonly command?: string[];

  /**
   * @schema PlanSpecPrepare#envFrom
   */
  readonly envFrom?: PlanSpecPrepareEnvFrom[];

  /**
   * @schema PlanSpecPrepare#envs
   */
  readonly envs?: PlanSpecPrepareEnvs[];

  /**
   * @schema PlanSpecPrepare#image
   */
  readonly image?: string;

  /**
   * @schema PlanSpecPrepare#securityContext
   */
  readonly securityContext?: PlanSpecPrepareSecurityContext;

  /**
   * @schema PlanSpecPrepare#volumes
   */
  readonly volumes?: PlanSpecPrepareVolumes[];

}

/**
 * Converts an object of type 'PlanSpecPrepare' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepare(obj: PlanSpecPrepare | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'envFrom': obj.envFrom?.map(y => toJson_PlanSpecPrepareEnvFrom(y)),
    'envs': obj.envs?.map(y => toJson_PlanSpecPrepareEnvs(y)),
    'image': obj.image,
    'securityContext': toJson_PlanSpecPrepareSecurityContext(obj.securityContext),
    'volumes': obj.volumes?.map(y => toJson_PlanSpecPrepareVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecSecrets
 */
export interface PlanSpecSecrets {
  /**
   * @schema PlanSpecSecrets#ignoreUpdates
   */
  readonly ignoreUpdates?: boolean;

  /**
   * @schema PlanSpecSecrets#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecSecrets#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'PlanSpecSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecSecrets(obj: PlanSpecSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ignoreUpdates': obj.ignoreUpdates,
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecTolerations
 */
export interface PlanSpecTolerations {
  /**
   * @schema PlanSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema PlanSpecTolerations#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema PlanSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema PlanSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'PlanSpecTolerations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecTolerations(obj: PlanSpecTolerations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'operator': obj.operator,
    'tolerationSeconds': obj.tolerationSeconds,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgrade
 */
export interface PlanSpecUpgrade {
  /**
   * @schema PlanSpecUpgrade#args
   */
  readonly args?: string[];

  /**
   * @schema PlanSpecUpgrade#command
   */
  readonly command?: string[];

  /**
   * @schema PlanSpecUpgrade#envFrom
   */
  readonly envFrom?: PlanSpecUpgradeEnvFrom[];

  /**
   * @schema PlanSpecUpgrade#envs
   */
  readonly envs?: PlanSpecUpgradeEnvs[];

  /**
   * @schema PlanSpecUpgrade#image
   */
  readonly image?: string;

  /**
   * @schema PlanSpecUpgrade#securityContext
   */
  readonly securityContext?: PlanSpecUpgradeSecurityContext;

  /**
   * @schema PlanSpecUpgrade#volumes
   */
  readonly volumes?: PlanSpecUpgradeVolumes[];

}

/**
 * Converts an object of type 'PlanSpecUpgrade' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgrade(obj: PlanSpecUpgrade | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'envFrom': obj.envFrom?.map(y => toJson_PlanSpecUpgradeEnvFrom(y)),
    'envs': obj.envs?.map(y => toJson_PlanSpecUpgradeEnvs(y)),
    'image': obj.image,
    'securityContext': toJson_PlanSpecUpgradeSecurityContext(obj.securityContext),
    'volumes': obj.volumes?.map(y => toJson_PlanSpecUpgradeVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecWindow
 */
export interface PlanSpecWindow {
  /**
   * @schema PlanSpecWindow#days
   */
  readonly days?: string[];

  /**
   * @schema PlanSpecWindow#endTime
   */
  readonly endTime?: string;

  /**
   * @schema PlanSpecWindow#startTime
   */
  readonly startTime?: string;

  /**
   * @schema PlanSpecWindow#timeZone
   */
  readonly timeZone?: string;

}

/**
 * Converts an object of type 'PlanSpecWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecWindow(obj: PlanSpecWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'days': obj.days?.map(y => y),
    'endTime': obj.endTime,
    'startTime': obj.startTime,
    'timeZone': obj.timeZone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecDrainPodSelector
 */
export interface PlanSpecDrainPodSelector {
  /**
   * @schema PlanSpecDrainPodSelector#matchExpressions
   */
  readonly matchExpressions?: PlanSpecDrainPodSelectorMatchExpressions[];

  /**
   * @schema PlanSpecDrainPodSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PlanSpecDrainPodSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecDrainPodSelector(obj: PlanSpecDrainPodSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PlanSpecDrainPodSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecNodeSelectorMatchExpressions
 */
export interface PlanSpecNodeSelectorMatchExpressions {
  /**
   * @schema PlanSpecNodeSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecNodeSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema PlanSpecNodeSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PlanSpecNodeSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecNodeSelectorMatchExpressions(obj: PlanSpecNodeSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvFrom
 */
export interface PlanSpecPrepareEnvFrom {
  /**
   * @schema PlanSpecPrepareEnvFrom#configMapRef
   */
  readonly configMapRef?: PlanSpecPrepareEnvFromConfigMapRef;

  /**
   * @schema PlanSpecPrepareEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * @schema PlanSpecPrepareEnvFrom#secretRef
   */
  readonly secretRef?: PlanSpecPrepareEnvFromSecretRef;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvFrom(obj: PlanSpecPrepareEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_PlanSpecPrepareEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_PlanSpecPrepareEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvs
 */
export interface PlanSpecPrepareEnvs {
  /**
   * @schema PlanSpecPrepareEnvs#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareEnvs#value
   */
  readonly value?: string;

  /**
   * @schema PlanSpecPrepareEnvs#valueFrom
   */
  readonly valueFrom?: PlanSpecPrepareEnvsValueFrom;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvs(obj: PlanSpecPrepareEnvs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_PlanSpecPrepareEnvsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContext
 */
export interface PlanSpecPrepareSecurityContext {
  /**
   * @schema PlanSpecPrepareSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema PlanSpecPrepareSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: PlanSpecPrepareSecurityContextAppArmorProfile;

  /**
   * @schema PlanSpecPrepareSecurityContext#capabilities
   */
  readonly capabilities?: PlanSpecPrepareSecurityContextCapabilities;

  /**
   * @schema PlanSpecPrepareSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema PlanSpecPrepareSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema PlanSpecPrepareSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema PlanSpecPrepareSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema PlanSpecPrepareSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema PlanSpecPrepareSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema PlanSpecPrepareSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PlanSpecPrepareSecurityContextSeLinuxOptions;

  /**
   * @schema PlanSpecPrepareSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PlanSpecPrepareSecurityContextSeccompProfile;

  /**
   * @schema PlanSpecPrepareSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PlanSpecPrepareSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContext(obj: PlanSpecPrepareSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'appArmorProfile': toJson_PlanSpecPrepareSecurityContextAppArmorProfile(obj.appArmorProfile),
    'capabilities': toJson_PlanSpecPrepareSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PlanSpecPrepareSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PlanSpecPrepareSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_PlanSpecPrepareSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareVolumes
 */
export interface PlanSpecPrepareVolumes {
  /**
   * @schema PlanSpecPrepareVolumes#destination
   */
  readonly destination?: string;

  /**
   * @schema PlanSpecPrepareVolumes#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareVolumes#source
   */
  readonly source?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareVolumes(obj: PlanSpecPrepareVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': obj.destination,
    'name': obj.name,
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvFrom
 */
export interface PlanSpecUpgradeEnvFrom {
  /**
   * @schema PlanSpecUpgradeEnvFrom#configMapRef
   */
  readonly configMapRef?: PlanSpecUpgradeEnvFromConfigMapRef;

  /**
   * @schema PlanSpecUpgradeEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * @schema PlanSpecUpgradeEnvFrom#secretRef
   */
  readonly secretRef?: PlanSpecUpgradeEnvFromSecretRef;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvFrom(obj: PlanSpecUpgradeEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_PlanSpecUpgradeEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_PlanSpecUpgradeEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvs
 */
export interface PlanSpecUpgradeEnvs {
  /**
   * @schema PlanSpecUpgradeEnvs#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeEnvs#value
   */
  readonly value?: string;

  /**
   * @schema PlanSpecUpgradeEnvs#valueFrom
   */
  readonly valueFrom?: PlanSpecUpgradeEnvsValueFrom;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvs(obj: PlanSpecUpgradeEnvs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_PlanSpecUpgradeEnvsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContext
 */
export interface PlanSpecUpgradeSecurityContext {
  /**
   * @schema PlanSpecUpgradeSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema PlanSpecUpgradeSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: PlanSpecUpgradeSecurityContextAppArmorProfile;

  /**
   * @schema PlanSpecUpgradeSecurityContext#capabilities
   */
  readonly capabilities?: PlanSpecUpgradeSecurityContextCapabilities;

  /**
   * @schema PlanSpecUpgradeSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema PlanSpecUpgradeSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema PlanSpecUpgradeSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema PlanSpecUpgradeSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema PlanSpecUpgradeSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema PlanSpecUpgradeSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PlanSpecUpgradeSecurityContextSeLinuxOptions;

  /**
   * @schema PlanSpecUpgradeSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PlanSpecUpgradeSecurityContextSeccompProfile;

  /**
   * @schema PlanSpecUpgradeSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PlanSpecUpgradeSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContext(obj: PlanSpecUpgradeSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'appArmorProfile': toJson_PlanSpecUpgradeSecurityContextAppArmorProfile(obj.appArmorProfile),
    'capabilities': toJson_PlanSpecUpgradeSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PlanSpecUpgradeSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PlanSpecUpgradeSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_PlanSpecUpgradeSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeVolumes
 */
export interface PlanSpecUpgradeVolumes {
  /**
   * @schema PlanSpecUpgradeVolumes#destination
   */
  readonly destination?: string;

  /**
   * @schema PlanSpecUpgradeVolumes#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeVolumes#source
   */
  readonly source?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeVolumes(obj: PlanSpecUpgradeVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': obj.destination,
    'name': obj.name,
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecDrainPodSelectorMatchExpressions
 */
export interface PlanSpecDrainPodSelectorMatchExpressions {
  /**
   * @schema PlanSpecDrainPodSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecDrainPodSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema PlanSpecDrainPodSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PlanSpecDrainPodSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecDrainPodSelectorMatchExpressions(obj: PlanSpecDrainPodSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvFromConfigMapRef
 */
export interface PlanSpecPrepareEnvFromConfigMapRef {
  /**
   * @schema PlanSpecPrepareEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvFromConfigMapRef(obj: PlanSpecPrepareEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvFromSecretRef
 */
export interface PlanSpecPrepareEnvFromSecretRef {
  /**
   * @schema PlanSpecPrepareEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvFromSecretRef(obj: PlanSpecPrepareEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvsValueFrom
 */
export interface PlanSpecPrepareEnvsValueFrom {
  /**
   * @schema PlanSpecPrepareEnvsValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PlanSpecPrepareEnvsValueFromConfigMapKeyRef;

  /**
   * @schema PlanSpecPrepareEnvsValueFrom#fieldRef
   */
  readonly fieldRef?: PlanSpecPrepareEnvsValueFromFieldRef;

  /**
   * @schema PlanSpecPrepareEnvsValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PlanSpecPrepareEnvsValueFromResourceFieldRef;

  /**
   * @schema PlanSpecPrepareEnvsValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PlanSpecPrepareEnvsValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvsValueFrom(obj: PlanSpecPrepareEnvsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_PlanSpecPrepareEnvsValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_PlanSpecPrepareEnvsValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_PlanSpecPrepareEnvsValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_PlanSpecPrepareEnvsValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContextAppArmorProfile
 */
export interface PlanSpecPrepareSecurityContextAppArmorProfile {
  /**
   * @schema PlanSpecPrepareSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextAppArmorProfile#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContextAppArmorProfile(obj: PlanSpecPrepareSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContextCapabilities
 */
export interface PlanSpecPrepareSecurityContextCapabilities {
  /**
   * @schema PlanSpecPrepareSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema PlanSpecPrepareSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContextCapabilities(obj: PlanSpecPrepareSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContextSeLinuxOptions
 */
export interface PlanSpecPrepareSecurityContextSeLinuxOptions {
  /**
   * @schema PlanSpecPrepareSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContextSeLinuxOptions(obj: PlanSpecPrepareSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContextSeccompProfile
 */
export interface PlanSpecPrepareSecurityContextSeccompProfile {
  /**
   * @schema PlanSpecPrepareSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextSeccompProfile#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContextSeccompProfile(obj: PlanSpecPrepareSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareSecurityContextWindowsOptions
 */
export interface PlanSpecPrepareSecurityContextWindowsOptions {
  /**
   * @schema PlanSpecPrepareSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema PlanSpecPrepareSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema PlanSpecPrepareSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareSecurityContextWindowsOptions(obj: PlanSpecPrepareSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvFromConfigMapRef
 */
export interface PlanSpecUpgradeEnvFromConfigMapRef {
  /**
   * @schema PlanSpecUpgradeEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvFromConfigMapRef(obj: PlanSpecUpgradeEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvFromSecretRef
 */
export interface PlanSpecUpgradeEnvFromSecretRef {
  /**
   * @schema PlanSpecUpgradeEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvFromSecretRef(obj: PlanSpecUpgradeEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvsValueFrom
 */
export interface PlanSpecUpgradeEnvsValueFrom {
  /**
   * @schema PlanSpecUpgradeEnvsValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PlanSpecUpgradeEnvsValueFromConfigMapKeyRef;

  /**
   * @schema PlanSpecUpgradeEnvsValueFrom#fieldRef
   */
  readonly fieldRef?: PlanSpecUpgradeEnvsValueFromFieldRef;

  /**
   * @schema PlanSpecUpgradeEnvsValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PlanSpecUpgradeEnvsValueFromResourceFieldRef;

  /**
   * @schema PlanSpecUpgradeEnvsValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PlanSpecUpgradeEnvsValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvsValueFrom(obj: PlanSpecUpgradeEnvsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_PlanSpecUpgradeEnvsValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_PlanSpecUpgradeEnvsValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_PlanSpecUpgradeEnvsValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_PlanSpecUpgradeEnvsValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContextAppArmorProfile
 */
export interface PlanSpecUpgradeSecurityContextAppArmorProfile {
  /**
   * @schema PlanSpecUpgradeSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextAppArmorProfile#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContextAppArmorProfile(obj: PlanSpecUpgradeSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContextCapabilities
 */
export interface PlanSpecUpgradeSecurityContextCapabilities {
  /**
   * @schema PlanSpecUpgradeSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema PlanSpecUpgradeSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContextCapabilities(obj: PlanSpecUpgradeSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContextSeLinuxOptions
 */
export interface PlanSpecUpgradeSecurityContextSeLinuxOptions {
  /**
   * @schema PlanSpecUpgradeSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContextSeLinuxOptions(obj: PlanSpecUpgradeSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContextSeccompProfile
 */
export interface PlanSpecUpgradeSecurityContextSeccompProfile {
  /**
   * @schema PlanSpecUpgradeSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextSeccompProfile#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContextSeccompProfile(obj: PlanSpecUpgradeSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeSecurityContextWindowsOptions
 */
export interface PlanSpecUpgradeSecurityContextWindowsOptions {
  /**
   * @schema PlanSpecUpgradeSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema PlanSpecUpgradeSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema PlanSpecUpgradeSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeSecurityContextWindowsOptions(obj: PlanSpecUpgradeSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvsValueFromConfigMapKeyRef
 */
export interface PlanSpecPrepareEnvsValueFromConfigMapKeyRef {
  /**
   * @schema PlanSpecPrepareEnvsValueFromConfigMapKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvsValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvsValueFromConfigMapKeyRef(obj: PlanSpecPrepareEnvsValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvsValueFromFieldRef
 */
export interface PlanSpecPrepareEnvsValueFromFieldRef {
  /**
   * @schema PlanSpecPrepareEnvsValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromFieldRef#fieldPath
   */
  readonly fieldPath?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvsValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvsValueFromFieldRef(obj: PlanSpecPrepareEnvsValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvsValueFromResourceFieldRef
 */
export interface PlanSpecPrepareEnvsValueFromResourceFieldRef {
  /**
   * @schema PlanSpecPrepareEnvsValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromResourceFieldRef#resource
   */
  readonly resource?: string;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvsValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvsValueFromResourceFieldRef(obj: PlanSpecPrepareEnvsValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecPrepareEnvsValueFromSecretKeyRef
 */
export interface PlanSpecPrepareEnvsValueFromSecretKeyRef {
  /**
   * @schema PlanSpecPrepareEnvsValueFromSecretKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecPrepareEnvsValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecPrepareEnvsValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecPrepareEnvsValueFromSecretKeyRef(obj: PlanSpecPrepareEnvsValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvsValueFromConfigMapKeyRef
 */
export interface PlanSpecUpgradeEnvsValueFromConfigMapKeyRef {
  /**
   * @schema PlanSpecUpgradeEnvsValueFromConfigMapKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvsValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvsValueFromConfigMapKeyRef(obj: PlanSpecUpgradeEnvsValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvsValueFromFieldRef
 */
export interface PlanSpecUpgradeEnvsValueFromFieldRef {
  /**
   * @schema PlanSpecUpgradeEnvsValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromFieldRef#fieldPath
   */
  readonly fieldPath?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvsValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvsValueFromFieldRef(obj: PlanSpecUpgradeEnvsValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvsValueFromResourceFieldRef
 */
export interface PlanSpecUpgradeEnvsValueFromResourceFieldRef {
  /**
   * @schema PlanSpecUpgradeEnvsValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromResourceFieldRef#resource
   */
  readonly resource?: string;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvsValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvsValueFromResourceFieldRef(obj: PlanSpecUpgradeEnvsValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PlanSpecUpgradeEnvsValueFromSecretKeyRef
 */
export interface PlanSpecUpgradeEnvsValueFromSecretKeyRef {
  /**
   * @schema PlanSpecUpgradeEnvsValueFromSecretKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema PlanSpecUpgradeEnvsValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PlanSpecUpgradeEnvsValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PlanSpecUpgradeEnvsValueFromSecretKeyRef(obj: PlanSpecUpgradeEnvsValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

