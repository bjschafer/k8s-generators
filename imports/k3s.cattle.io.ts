// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Addon is used to track application of a manifest file on disk. It mostly exists so that the wrangler DesiredSet
Apply controller has an object to track as the owner, and ensure that all created resources are tracked when the
manifest is modified or removed.
 *
 * @schema Addon
 */
export class Addon extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Addon"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'k3s.cattle.io/v1',
    kind: 'Addon',
  }

  /**
   * Renders a Kubernetes manifest for "Addon".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AddonProps = {}): any {
    return {
      ...Addon.GVK,
      ...toJson_AddonProps(props),
    };
  }

  /**
   * Defines a "Addon" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AddonProps = {}) {
    super(scope, id, {
      ...Addon.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...Addon.GVK,
      ...toJson_AddonProps(resolved),
    };
  }
}

/**
 * Addon is used to track application of a manifest file on disk. It mostly exists so that the wrangler DesiredSet
 * Apply controller has an object to track as the owner, and ensure that all created resources are tracked when the
 * manifest is modified or removed.
 *
 * @schema Addon
 */
export interface AddonProps {
  /**
   * @schema Addon#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec provides information about the on-disk manifest backing this resource.
   *
   * @schema Addon#spec
   */
  readonly spec?: AddonSpec;
}

/**
 * Converts an object of type 'AddonProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AddonProps(obj: AddonProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AddonSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Spec provides information about the on-disk manifest backing this resource.
 *
 * @schema AddonSpec
 */
export interface AddonSpec {
  /**
   * Checksum is the SHA256 checksum of the most recently successfully applied manifest file.
   *
   * @schema AddonSpec#checksum
   */
  readonly checksum?: string;

  /**
   * Source is the Path on disk to the manifest file that this Addon tracks.
   *
   * @schema AddonSpec#source
   */
  readonly source?: string;
}

/**
 * Converts an object of type 'AddonSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_AddonSpec(obj: AddonSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'checksum': obj.checksum,
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * ETCDSnapshot tracks a point-in-time snapshot of the etcd datastore.
 *
 * @schema ETCDSnapshotFile
 */
export class EtcdSnapshotFile extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ETCDSnapshotFile"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'k3s.cattle.io/v1',
    kind: 'ETCDSnapshotFile',
  }

  /**
   * Renders a Kubernetes manifest for "ETCDSnapshotFile".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EtcdSnapshotFileProps = {}): any {
    return {
      ...EtcdSnapshotFile.GVK,
      ...toJson_EtcdSnapshotFileProps(props),
    };
  }

  /**
   * Defines a "ETCDSnapshotFile" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EtcdSnapshotFileProps = {}) {
    super(scope, id, {
      ...EtcdSnapshotFile.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public override toJson(): any {
    const resolved = super.toJson();

    return {
      ...EtcdSnapshotFile.GVK,
      ...toJson_EtcdSnapshotFileProps(resolved),
    };
  }
}

/**
 * ETCDSnapshot tracks a point-in-time snapshot of the etcd datastore.
 *
 * @schema ETCDSnapshotFile
 */
export interface EtcdSnapshotFileProps {
  /**
   * @schema ETCDSnapshotFile#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines properties of an etcd snapshot file
   *
   * @schema ETCDSnapshotFile#spec
   */
  readonly spec?: EtcdSnapshotFileSpec;
}

/**
 * Converts an object of type 'EtcdSnapshotFileProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_EtcdSnapshotFileProps(obj: EtcdSnapshotFileProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EtcdSnapshotFileSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Spec defines properties of an etcd snapshot file
 *
 * @schema EtcdSnapshotFileSpec
 */
export interface EtcdSnapshotFileSpec {
  /**
   * Location is the absolute file:// or s3:// URI address of the snapshot.
   *
   * @schema EtcdSnapshotFileSpec#location
   */
  readonly location: string;

  /**
   * Metadata contains point-in-time snapshot of the contents of the
   * k3s-etcd-snapshot-extra-metadata ConfigMap's data field, at the time the
   * snapshot was taken. This is intended to contain data about cluster state
   * that may be important for an external system to have available when restoring
   * the snapshot.
   *
   * @schema EtcdSnapshotFileSpec#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * NodeName contains the name of the node that took the snapshot.
   *
   * @schema EtcdSnapshotFileSpec#nodeName
   */
  readonly nodeName: string;

  /**
   * S3 contains extra metadata about the S3 storage system holding the
   * snapshot. This is guaranteed to be set for all snapshots uploaded to S3.
   * If not specified, the snapshot was not uploaded to S3.
   *
   * @schema EtcdSnapshotFileSpec#s3
   */
  readonly s3?: EtcdSnapshotFileSpecS3;

  /**
   * SnapshotName contains the base name of the snapshot file. CLI actions that act
   * on snapshots stored locally or within a pre-configured S3 bucket and
   * prefix usually take the snapshot name as their argument.
   *
   * @schema EtcdSnapshotFileSpec#snapshotName
   */
  readonly snapshotName: string;
}

/**
 * Converts an object of type 'EtcdSnapshotFileSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_EtcdSnapshotFileSpec(obj: EtcdSnapshotFileSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'location': obj.location,
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'nodeName': obj.nodeName,
    's3': toJson_EtcdSnapshotFileSpecS3(obj.s3),
    'snapshotName': obj.snapshotName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * S3 contains extra metadata about the S3 storage system holding the
 * snapshot. This is guaranteed to be set for all snapshots uploaded to S3.
 * If not specified, the snapshot was not uploaded to S3.
 *
 * @schema EtcdSnapshotFileSpecS3
 */
export interface EtcdSnapshotFileSpecS3 {
  /**
   * Bucket is the bucket holding the snapshot
   *
   * @schema EtcdSnapshotFileSpecS3#bucket
   */
  readonly bucket?: string;

  /**
   * BucketLookup is the bucket lookup type, one of 'auto', 'dns', 'path'. Default if empty is 'auto'.
   *
   * @schema EtcdSnapshotFileSpecS3#bucketLookup
   */
  readonly bucketLookup?: string;

  /**
   * Endpoint is the host or host:port of the S3 service
   *
   * @schema EtcdSnapshotFileSpecS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * EndpointCA is the path on disk to the S3 service's trusted CA list. Leave empty to use the OS CA bundle.
   *
   * @schema EtcdSnapshotFileSpecS3#endpointCA
   */
  readonly endpointCa?: string;

  /**
   * Insecure is true if the S3 service uses HTTP instead of HTTPS
   *
   * @schema EtcdSnapshotFileSpecS3#insecure
   */
  readonly insecure?: boolean;

  /**
   * Prefix is the prefix in which the snapshot file is stored.
   *
   * @schema EtcdSnapshotFileSpecS3#prefix
   */
  readonly prefix?: string;

  /**
   * Region is the region of the S3 service
   *
   * @schema EtcdSnapshotFileSpecS3#region
   */
  readonly region?: string;

  /**
   * SkipSSLVerify is true if TLS certificate verification is disabled
   *
   * @schema EtcdSnapshotFileSpecS3#skipSSLVerify
   */
  readonly skipSslVerify?: boolean;
}

/**
 * Converts an object of type 'EtcdSnapshotFileSpecS3' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_EtcdSnapshotFileSpecS3(obj: EtcdSnapshotFileSpecS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucket': obj.bucket,
    'bucketLookup': obj.bucketLookup,
    'endpoint': obj.endpoint,
    'endpointCA': obj.endpointCa,
    'insecure': obj.insecure,
    'prefix': obj.prefix,
    'region': obj.region,
    'skipSSLVerify': obj.skipSslVerify,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

